{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robots.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCDSC,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAK,SAASC,IAAG,+BAA2BH,EAAMI,GAAjC,mBACtB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCaXC,EAtBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGd,OACA,6BAEKA,EAAOC,KAAI,SAACC,EAAKC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLP,GAAKI,EAAOG,GAAGP,GACfC,KAAOG,EAAOG,GAAGN,KACjBC,MAAQE,EAAOG,GAAGL,aCfzBE,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACNQ,SAAU,OACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNQ,SAAU,YACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,SACVP,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNQ,SAAU,mBACVP,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,eACVP,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNQ,SAAU,gBACVP,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNQ,SAAU,iBACVP,MAAO,2BCjDIQ,EARE,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC3B,OACI,yBAAKf,UAAU,OACX,2BAAOA,UAAU,mCACjBgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MC8BjDI,G,wDA7BX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAPzC,EAAKC,MAAM,CACPlB,OAAOA,EACPO,YAAY,IAJP,E,qDAeJ,IAAD,OACEY,EAAiBC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC5C,OAAOA,EAAOH,KAAKyB,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAErE,OACI,yBAAK7B,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcY,KAAKP,iBAC9B,kBAAC,EAAD,CAAUb,OAAUmB,IAHxB,S,GArBMK,cCIlBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b1b8b9c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\r\n            \r\n            <img alt= 'robots' src= {`https://robohash.org/${props.id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robots}) =>{\r\n    \r\n\r\n    return(\r\n    <div>\r\n        {\r\n         robots.map((user,i)=> {\r\n            return (\r\n                <Card \r\n                    key={i}\r\n                    id= {robots[i].id}\r\n                    name= {robots[i].name} \r\n                    email= {robots[i].email} \r\n                />\r\n                )\r\n            })\r\n          \r\n        }\r\n      \r\n    </div>\r\n    )\r\n}\r\nexport default CardList;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst SearchBox= ({searchfield,searchChange})=> {\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' placeholder='search robots' onChange={searchChange}/>\r\n       </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport {robots} from './robots.js';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:robots,\r\n            searchfield:''\r\n        }\r\n\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n        \r\n        \r\n     \r\n    }\r\n    \r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <CardList robots = {filteredRobots}/>,\r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './App'\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}